#include <16F877A.h>
#fuses XT, NOWDT, NOPROTECT, NOLVP
#use delay(clock=4000000)
#use i2c(SLAVE, SDA=PIN_C4, SCL=PIN_C3, address=0x22, FORCE_HW)

#define LED_VERDE_IZQ PIN_C0
#define LED_AMARILLO_IZQ PIN_C1
#define LED_ROJO_IZQ PIN_C2
#define LED_VERDE_DER PIN_D0
#define LED_AMARILLO_DER PIN_D1
#define LED_ROJO_DER PIN_D2

void apagar_todos_leds() {
    output_low(LED_VERDE_IZQ);
    output_low(LED_AMARILLO_IZQ);
    output_low(LED_ROJO_IZQ);
    output_low(LED_VERDE_DER);
    output_low(LED_AMARILLO_DER);
    output_low(LED_ROJO_DER);
}

// Función personalizada para comparar cadenas
int compararCadenas(const char* str1, const char* str2) {
    int i = 0;
    while (str1[i] != '\0' && str2[i] != '\0') {
        if (str1[i] != str2[i]) {
            return 0;  // Las cadenas no coinciden
        }
        i++;
    }
    return (str1[i] == '\0' && str2[i] == '\0');  // Retorna 1 si son iguales
}

void procesarComando(char* comando) {
    apagar_todos_leds();  // Apagar todos los LEDs antes de encender los nuevos

    if (compararCadenas(comando, "VERDE_IZQ,ROJO_DER")) {
        output_high(LED_VERDE_IZQ);
        output_high(LED_ROJO_DER);
    } else if (compararCadenas(comando, "AMARILLO_IZQ,ROJO_DER")) {
        output_high(LED_AMARILLO_IZQ);
        output_high(LED_ROJO_DER);
    } else if (compararCadenas(comando, "ROJO_IZQ,VERDE_DER")) {
        output_high(LED_ROJO_IZQ);
        output_high(LED_VERDE_DER);
    } else if (compararCadenas(comando, "ROJO_IZQ,AMARILLO_DER")) {
        output_high(LED_ROJO_IZQ);
        output_high(LED_AMARILLO_DER);
    }
}

#INT_SSP
void i2c_isr() {
    static char comando[20];
    static int index = 0;

    char dato = i2c_read();
    if (dato == '\n' || index >= sizeof(comando) - 1) {
        comando[index] = '\0';  // Termina la cadena
        procesarComando(comando);
        index = 0;  // Reinicia el índice
    } else {
        comando[index++] = dato;  // Almacena el dato recibido
    }
}

void main() {
    enable_interrupts(INT_SSP);   // Habilitar interrupciones I2C
    enable_interrupts(GLOBAL);   // Habilitar interrupciones globales

    while (TRUE) {
        // Espera comandos I2C
    }
}

